
@Builder
@Data
public class TxtFileModel {
    private List<String> headers;  // optional, can be null
    private List<List<String>> lines;  // each inner list is a row of strings (each column as string)
}

public class TxtFileModelBuilder {

    /**
     * Convert list of Objects into TxtFileModel lines based on headers.
     * @param dataList List of objects
     * @param headers List of property names or headers (in order)
     * @param <T> Type of object
     * @return TxtFileModel with header and lines
     */
    public static <T> TxtFileModel buildFromObjects(List<String> headers, List<T> dataList) {
        List<List<String>> lines = new ArrayList<>();
        if (dataList == null || dataList.isEmpty()) {
            return TxtFileModel.builder().headers(headers).lines(lines).build();
        }
        // Reflectively read properties based on headers field names
        for (T obj : dataList) {
            List<String> row = new ArrayList<>();
            for (String field : headers) {
                try {
                    Field f = obj.getClass().getDeclaredField(field);
                    f.setAccessible(true);
                    Object value = f.get(obj);
                    row.add(value != null ? value.toString() : "");
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    row.add("");
                }
            }
            lines.add(row);
        }
        return TxtFileModel.builder().headers(headers).lines(lines).build();
    }

    /**
     * Build from raw string lines without header.
     */
    public static TxtFileModel buildFromStrings(List<String> lines) {
        List<List<String>> wrappedLines = lines == null ? Collections.emptyList() : lines.stream()
            .map(List::of)  // wrap each line in a list (single column)
            .collect(Collectors.toList());
        return TxtFileModel.builder().headers(null).lines(wrappedLines).build();
    }
}


class TxtGenerator {
    private static final String DELIMITER = "\t"; // or comma or configurable

    protected static ReportFile txtFileGenerator(Report reportName, TxtFileModel txtFileModel) {
        log.info("Started txt file generator for reportName : {}  lines.size: {}", reportName.getName(), CollectionUtils.size(txtFileModel.getLines()));

        String fileName = getFileName(reportName.getName());

        StringBuilder sb = new StringBuilder();
        if (txtFileModel.getHeaders() != null && !txtFileModel.getHeaders().isEmpty()) {
            sb.append(String.join(DELIMITER, txtFileModel.getHeaders()));
            sb.append("\n");
        }
        for (List<String> line : txtFileModel.getLines()) {
            sb.append(String.join(DELIMITER, line));
            sb.append("\n");
        }

        String content = sb.toString();
        return ReportFile.builder()
                .name(fileName)
                .content(content.getBytes(StandardCharsets.UTF_8))
                .build();
    }
    // getFileName remains unchanged
}


TxtFileModel model = TxtFileModelBuilder.buildFromStrings(myLines);
ReportFile reportFile = TxtGenerator.txtFileGenerator(report, model);


List<String> headers = List.of("merchantId", "merchantName", "amount");
List<MyPojo> data = ...;
TxtFileModel model = TxtFileModelBuilder.buildFromObjects(headers, data);
ReportFile reportFile = TxtGenerator.txtFileGenerator(report, model);
