private void generateTxtReport(Report report, UUID rrId, List<String> lines) {
        ReportFile reportFile = fileGeneratorService.generateFile(report, TxtFileModel.builder().lines(lines).build());
        uploadFileOnS3(reportFile, rrId, ReportFormat.TXT, report);
    }

@Service
@RequiredArgsConstructor
public class FileGeneratorService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final FileGenerator fileGenerator;
    private final ZipFileGenerator zipFileGenerator;
    private final S3Service s3Service;

 public ReportFile generateFile(Report report, TxtFileModel txtFileModel) {
        log.info("Started fileGenerator for reportFormat: TXT, report: {}", report.getName());
        return fileGenerator.generateFile(report, txtFileModel);
    }

   public ReportFile generateFile(Report report, TxtFileModel txtFileModel) {
        log.info("Started fileGenerator for reportFormat: TXT, report: {}", report.getName());
        return fileGenerator.generateFile(report, txtFileModel);
    }

@Component
@RequiredArgsConstructor
public class FileGenerator {
    private static final LoggerUtility logger = LoggerFactoryUtility.getLogger(FileGenerator.class);


    private final PdfGenerator pdfGenerator;
    private final TxtGenerator txtGenerator;
public ReportFile generateFile(Report report, TxtFileModel txtFileModel){
        logger.info("Generating file for report format: TXT, report: {}", report.getName());
        return txtGenerator.txtFileGenerator(report,txtFileModel);
    }

@Component
@RequiredArgsConstructor
public class TxtGenerator {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Generates a TXT file from the provided data and saves it to the file system.
     *
     * @param reportName - Name of the report
     * @return - Generated TXT file
     */
    public ReportFile txtFileGenerator(Report reportName, TxtFileModel txtFileModel) {
        log.info("Started txt file generator for reportName : {}  objects.size: {}", reportName.getName(),  CollectionUtils.size(txtFileModel.getLines()));
        String fileName = getFileName(reportName.getName());
        String content = generateTxt(txtFileModel);
        return ReportFile.builder().name(fileName).content(content.getBytes(StandardCharsets.UTF_8)).build();
    }

    /**
     * Constructs the file name for the TXT file based on the report name.
     *
     * @param reportName - Name of the report
     * @return - Generated file name
     */
    private String getFileName(String reportName) {
        return String.format("%s%s_%s.txt", ReportingConstant.REPORT_ROOT_FOLDER,
                reportName, LocalDateTime.now().format(FORMATTER_DD_MM_YY_HH_MM_SS));
    }

    /**
     * Generates the TXT content as a string without header.
     *
     * @param txtFileModel - List of data rows for the txt
     * @return - Txt content as a string
     */
    private String generateTxt(TxtFileModel txtFileModel){
        return String.join("\n", txtFileModel.getLines());
    }
}

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class TxtFileModel {
    private List<String> lines;
}


List<List<Object>> data
