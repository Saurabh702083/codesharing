import java.nio.ByteBuffer; // Add this import

@Transactional
public void updateReconStatus(String status, List<UUID> listOfRfdId) {
    log.info("Updating {} status.", status);
    MapSqlParameterSource[] batchParams = listOfRfdId.stream()
        .map(rfdId -> {
            // Convert UUID to byte array (16 bytes)
            ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
            bb.putLong(rfdId.getMostSignificantBits());
            bb.putLong(rfdId.getLeastSignificantBits());
            byte[] uuidBytes = bb.array();
            return new MapSqlParameterSource()
                .addValue("status", status)
                .addValue("rfdId", uuidBytes, Types.VARBINARY); // Use Types.VARBINARY for RAW
        })
        .toArray(MapSqlParameterSource[]::new);

    jdbcTemplate.batchUpdate(UPDATE_RECON_STATUS, batchParams);
}



1).
@Service
@RequiredArgsConstructor
public class JavaReconciliationService {

    private static final int BATCH_SIZE = 2000;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantOrderPaymentDao merchantOrderPaymentDao;
    private final ReconFileDtlsDao reconFileDtlsDao;
    private final ReconFileSummaryDao reconFileSummaryDao;
    private final ReconResultProcessorService reconResultProcessorService;
    private final PayoutSchedulerDataDao payoutSchedulerDataDao;

    public void performRecon(UUID rfsId) {
        log.info("Starting Recon file process at: {}", System.currentTimeMillis());
        try {
            // Step 1. Process Reconciliation to get Matched , Unmatched and Duplicate record.
            ReconResultDto reconResultDto = processReconciliation(rfsId);
            // Step 2. Update ReconStatus in ReconFileDtls Table
            updateReconStatuses(reconResultDto);
            // Step 3. Update Matched , Unmatched and Duplicate count in ReconFileSummary table
            log.info("Recon file process completed at: {}", System.currentTimeMillis());
            log.info("Publishing Recon result for Transaction Service");
            // Step 4. Publish Matched record to Transaction Service
            log.info("Updating recon details in PayoutScheduler table");

        } catch (Exception ex) {
            log.error("Error during recon process for rfsId {}: {}", rfsId, ex.getMessage(), ex);
        }
    }

    private ReconResultDto processReconciliation(UUID rfsId) {

        Map<String, List<ReconFileDtlsDto>> reconPaymentMap = fetchAndGroupReconData(rfsId);
        Map<String, MerchantOrderPaymentDto> systemPaymentMap = fetchMerchantPayments(rfsId);

        return categorizeRecords(reconPaymentMap, systemPaymentMap);
    }

    private Map<String, List<ReconFileDtlsDto>> fetchAndGroupReconData(UUID rfsId) {
        log.info("Fetching Recon data from ReconFileDtls");
        List<ReconFileDtlsDto> reconFileData = reconFileDtlsDao.getAllReconFileData(rfsId);
        return reconFileData.stream().collect(Collectors.groupingBy(ReconFileDtlsDto::getAtrnNum));
    }

    private Map<String, MerchantOrderPaymentDto> fetchMerchantPayments(UUID rfsId) {
        log.info("Fetching matched ATRNs data from MerchantOrderPayment");
        List<MerchantOrderPaymentDto> payments = merchantOrderPaymentDao.getMatchedData(rfsId);
        return payments.stream().collect(Collectors.toMap(MerchantOrderPaymentDto::getAtrnNum, Function.identity(), (existing, replacement) -> {
            log.warn("Duplicate ATRN detected: {}", existing.getAtrnNum());
            return existing;
        }));
    }

    private ReconResultDto categorizeRecords(Map<String, List<ReconFileDtlsDto>> reconPaymentMap, Map<String, MerchantOrderPaymentDto> systemPaymentMap) {

        ReconResultDto result = new ReconResultDto();

        reconPaymentMap.forEach((atrn, reconList) -> {

            if (systemPaymentMap.containsKey((atrn))) {
                processMatchingAtrn(reconList, systemPaymentMap.get(atrn), result);
            } else {
                result.addUnmatched(reconList);
            }

        });

        return result;
    }

    private void processMatchingAtrn(List<ReconFileDtlsDto> reconFileDtlsList, MerchantOrderPaymentDto payment, ReconResultDto result) {

        //Step-1 Duplicate checking
        if (reconFileDtlsList.size() > 1) {

            boolean oneMatched = false;

            for (ReconFileDtlsDto rfd : reconFileDtlsList) {

                if (!oneMatched && rfd.getPaymentAmount().compareTo(payment.getDebitAmt()) == 0) {
                    result.addMatched(rfd);
                    oneMatched = true;
                } else {
                    result.addDuplicate(rfd);
                }
            }

            //Step-2 Single record checking
        } else if (reconFileDtlsList.size() == 1) {

            if ((reconFileDtlsList.getFirst().getPaymentAmount().compareTo(payment.getDebitAmt()) == 0)) {
                result.addMatched(reconFileDtlsList.getFirst());
            } else {
                result.addUnmatched(reconFileDtlsList);
            }

        } else {
            log.error("Invalid reconFileDtlsList: {} with blank size.", reconFileDtlsList);
        }

    }

    private void updateReconStatuses(ReconResultDto result) {
        batchUpdateStatus(result.getMatched(), "MATCHED");
        batchUpdateStatus(result.getUnmatched(), "UNMATCHED");
        batchUpdateStatus(result.getDuplicate(), "DUPLICATE");
    }

    /**
     * * Updating Recon Status in batch.
     * *
     * * @param list   of ReconFileDtls
     * * @param status Recon_Status
     */
    // Batch to update Status
    @Transactional
    private void batchUpdateStatus(List<ReconFileDtlsDto> list, String status) {
        List<UUID> batchAtrns;
        for (int i = 0; i < list.size(); i += BATCH_SIZE) {
            int end = Math.min(i + BATCH_SIZE, list.size());
            batchAtrns = list.subList(i, end).stream().map(ReconFileDtlsDto::getRfdId).toList();
            reconFileDtlsDao.updateReconStatus(status, batchAtrns);
        }
    }
}

@Component
@RequiredArgsConstructor
public class ReconFileDtlsDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ReconFileDtlsRepository reconFileDtlsRepository;
    private final ReconFileDtlsMapper reconFileDtlsMapper;
    private final ReconFileRepository fileDtlsRepository;


    public void updateReconStatus(String status, List<UUID> listOfRfdId) {
        fileDtlsRepository.updateReconStatus(status,listOfRfdId);
    }

    public List<ReconFileDtlsDto> getAllReconFileData(UUID rfsId){
         return reconFileDtlsMapper.mapToDtoList(fileDtlsRepository.getAllByRfsId(rfsId));
    }
}

@Repository
@RequiredArgsConstructor
public class ReconFileRepository {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final NamedParameterJdbcTemplate jdbcTemplate;

    /**
     * This will update the ReconStatus
     *
     * @param status   String
     * @param listOfRfdId List of atrn
     */
    @Transactional
    public void updateReconStatus(String status, List<UUID> listOfRfdId) {

        log.info("Updating {} status.", status);
        MapSqlParameterSource[] batchParams = listOfRfdId.stream().map(rfdId -> new MapSqlParameterSource().addValue("status", status).addValue("rfdId", rfdId.toString().replace("-", "").toUpperCase())).toArray(MapSqlParameterSource[]::new);

        jdbcTemplate.batchUpdate(UPDATE_RECON_STATUS, batchParams);
    }
    /**
     * Getting ReconFile data based upon rfsId.
     *
     * @param rfsId  UUID file I'd
     */
    public List<ReconFileDtls> getAllByRfsId(UUID rfsId) {
        log.info("Getting data for {} rfsId.", rfsId);
        MapSqlParameterSource params = new MapSqlParameterSource().addValue("rfsId", rfsId.toString());
        return jdbcTemplate.query(GET_ALL_RECON_FILE_DTLS, params, new ReconFileDtlsRowMapper());

    }
}

@UtilityClass
public class JdbcQuery {

    //Table Name
    public static final String MERCHANT_ORDER_PAYMENTS = "MERCHANT_ORDER_PAYMENTS";
    public static final String RECON_FILE_DTLS = "RECON_FILE_DTLS";
    public static final String RECON_STATUS_STAGE = "RECON_STATUS_STAGE";

    public static final String SELECT_YESTERDAY_BY_MILLIS_TEMPLATE = """
        (SELECT * FROM %s
         WHERE CREATED_DATE BETWEEN %d AND %d)
        """;

    public static String getYesterdayQuery(String table, long currentMillis) {
        long oneDayBefore = currentMillis - 24 * 60 * 60 * 1000;
        return String.format(SELECT_YESTERDAY_BY_MILLIS_TEMPLATE, table, oneDayBefore, currentMillis);
    }

    public static final String UPDATE_MERCHANT_ORDER="""
                        INSERT INTO MERCHANT_ORDERS (
                            SBI_ORDER_REF_NUMBER,
                            ATRN_NUM,
                            MULTI_ACCOUNTS
                        ) VALUES (
                            :SBI_ORDER_REF_NUMBER,
                            :ATRN_NUM,
                            :MULTI_ACCOUNTS
                        )
                    """;
public static final String UPDATE_MERCHANT_PAYMENT= """
                        INSERT INTO MERCHANT_ORDER_PAYMENTS (
                            MERCHANT_ID,
                            SBI_ORDER_REF_NUMBER,
                            ATRN_NUM,
                            ORDER_AMOUNT,
                            DEBIT_AMT,
                            TRANSACTION_STATUS,
                            PAYMENT_STATUS,
                            PAYMENT_SUCCESS_DATE
                        ) VALUES (
                            :MERCHANT_ID,
                            :SBI_ORDER_REF_NUMBER,
                            :ATRN_NUM,
                            :ORDER_AMOUNT,
                            :DEBIT_AMT,
                            :TRANSACTION_STATUS,
                            :PAYMENT_STATUS,
                            :PAYMENT_SUCCESS_DATE
                        )
                    """;

public static final String UPDATE_RECON_STATUS="""
                UPDATE RECON_FILE_DTLS rfd
                SET rfd.RECON_STATUS = :status
                WHERE rfd.RFD_ID = :rfdId
                """;

public static final String MATCHED_ORDER_PAYMENT_DATA="""
        SELECT m.*,r.RFS_ID FROM MERCHANT_ORDER_PAYMENTS m, RECON_FILE_DTLS r
        WHERE m.ATRN_NUM=r.ATRN_NUM AND r.RFS_ID= HEXTORAW(REPLACE(:rfsId, '-', ''))
        """;

public static final String GET_ALL_RECON_FILE_DTLS=  "SELECT * FROM RECON_FILE_DTLS WHERE RFS_ID = HEXTORAW(REPLACE(:rfsId, '-', ''))";

}

@Component
@RequiredArgsConstructor
public class MerchantOrderPaymentDao {
    private final PaymentReconViewRepository paymentViewRepo;
    private final OrderPaymentRepository orderPaymentRepository;
    private final MerchantOrderPaymentMapper orderPaymentMapper;

    public List<PaymentReconView> getAllPaymentViewData() {
        return paymentViewRepo.findAll();
    }

    public void updateOrderPayment(List<MerchantOrderPayment> orderPayments){
        orderPaymentRepository.updateMerchantOrderPayment(orderPayments);
    }

    public List<MerchantOrderPaymentDto>  getMatchedData(UUID rfsId){
         return orderPaymentMapper.toPaymentDtoList(orderPaymentRepository.getAllbyRfsId(rfsId));
    }
}

@Repository
@RequiredArgsConstructor
public class OrderPaymentRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    public List<MerchantOrderPayment> getAllbyRfsId(UUID rfsId) {
        String sql = JdbcQuery.MATCHED_ORDER_PAYMENT_DATA;
        MapSqlParameterSource param= new MapSqlParameterSource().addValue("rfsId",rfsId.toString());
        return jdbcTemplate.query(sql, param, new BeanPropertyRowMapper<>(MerchantOrderPayment.class));
    }
}

@Data
@Entity
@Table(name = "RECON_FILE_DTLS")
public class ReconFileDtls {

  @Id
  @GeneratedValue(strategy = GenerationType.UUID)
  private UUID rfdId;

  private UUID rfsId;
  private int rowNumber;
  private String recordType;
  private String atrnNum;
  private BigDecimal paymentAmount;
  private Date paymentDate;
  private String bankRefNumber;
  private String paymentStatus;
  private String reconStatus;
  private String settlementStatus;
  private String remark;

}

@Data
@Entity
@Table(name = "MERCHANT_ORDER_PAYMENTS")
@EqualsAndHashCode
public class MerchantOrderPayment {
  @Id private String atrnNum;

  @Column(name = "MERCHANT_ID")
  private String mId;

  private String sbiOrderRefNumber;
  private BigDecimal orderAmount;
  private BigDecimal debitAmt;

  @Enumerated(EnumType.STRING)
  private PaymentStatus paymentStatus;

  @Enumerated(EnumType.STRING)
  private TransactionStatus transactionStatus;

  private Date paymentSuccessDate;
}

@Getter
public  class ReconResultDto {
    private final List<ReconFileDtlsDto> matched = new LinkedList<>();
    private final List<ReconFileDtlsDto> duplicate = new LinkedList<>();
    private final List<ReconFileDtlsDto> unmatched = new LinkedList<>();

    public void addMatched(ReconFileDtlsDto reconFileDtlsDto) {
        matched.add(reconFileDtlsDto);
    }

    public void addUnmatched(List<ReconFileDtlsDto> reconFileDtlsDtos) {
        unmatched.addAll(reconFileDtlsDtos);
    }

    public void removeDuplicates(List<ReconFileDtlsDto> reconFileDtlsDtos) {
        duplicate.removeAll(reconFileDtlsDtos);
    }

    public void addDuplicate(ReconFileDtlsDto reconFileDtlsDto){
        duplicate.add(reconFileDtlsDto);
    }
}
------------------------------------------------------
2).

 @Transactional
    private void batchUpdateStatus(List<ReconFileDtlsDto> list, String status) {
        final int batchSize = BATCH_SIZE;
        for (int i = 0; i < list.size(); i += batchSize) {
            int end = Math.min(i + batchSize, list.size());
            List<String> batchAtrns = list.subList(i, end).stream().map(ReconFileDtlsDto::getAtrnNum).collect(Collectors.toList());
            reconFileDtlsDao.updateReconStatus(status, batchAtrns);
        }
    }

@Component
@RequiredArgsConstructor
public class ReconFileDtlsDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ReconFileDtlsRepository reconFileDtlsRepository;
    private final ReconFileDtlsMapper reconFileDtlsMapper;
    private final ReconFileRepository fileDtlsRepository;

    public void save(List<ReconFileDtlsDto> reconFileDtlsDtoList) {

        reconFileDtlsRepository.saveAll(reconFileDtlsMapper.mapToEntityList(reconFileDtlsDtoList));
    }

    /**
     * This will update the ReconStatus
     * @param status String
     * @param atrnNums List of atrn
     */
    @Transactional
    public void updateReconStatus(String status, List<String> atrnNums) {
        fileDtlsRepository.updateReconStatus(status,atrnNums);
    }
}

@Repository
@RequiredArgsConstructor
public class ReconFileRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * This will update the ReconStatus
     *
     * @param status   String
     * @param atrnNums List of atrn
     */
    @Transactional
    public void updateReconStatus(String status, List<String> atrnNums) {

        log.info("Updating {} status.", status);
        MapSqlParameterSource[] batchParams = atrnNums.stream().map(atrn -> new MapSqlParameterSource().addValue("status", status).addValue("atrnNum", atrn)).toArray(MapSqlParameterSource[]::new);

        jdbcTemplate.batchUpdate(UPDATE_RECON_STATUS, batchParams);
    }

@UtilityClass
public class JdbcQuery {

    //Table Name
    public static final String MERCHANT_ORDER_PAYMENTS = "MERCHANT_ORDER_PAYMENTS";
    public static final String RECON_FILE_DTLS = "RECON_FILE_DTLS";
    public static final String RECON_STATUS_STAGE = "RECON_STATUS_STAGE";


public static final String UPDATE_RECON_STATUS="""
                UPDATE RECON_FILE_DTLS rfd
                SET rfd.RECON_STATUS = :status
                WHERE rfd.ATRN_NUM = :atrnNum
                """;
}


1st one is my full code for Reconciliation , I am geting data from reconFileDtls and MerchantOrderPayment table and then i do the reconcilliation process and then set the record into three record MATCHED, UNMATCHED, DUPLICATE.

2nd one was my code from past. 

but with my current code i am facing some issue , earlealy when i used to call  batchUpdateStatus(result.getMatched(), Status) it used to update the Status based upon the ATRN and it used to update my record for 100000 with in 1min 30sec. but now when i am calling batchUpdateStatus(result.getMatched(), Status) it updates status of the record by rfdId and here rfdId is my UUID and primery Key but this takes lots of time to update my record and some times when i run this service outcome doesnot comes and and my postman keeps on running .

i dont know why this is happening , can you help me to solve this. 

