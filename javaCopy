2025-07-15 14:44:28.969 ERROR | com.epay.reporting.exceptionhandlers.ReportingExceptionHandler:98 | principal=  | scenario=/api/reporting/v1/invoice/transaction/1000003 | operation=POST | correlation=6b336bfb-4c60-4cab-9e0b-a5f9214ef761 | handleDBException | Database exception occurred: PreparedStatementCallback; uncategorized SQLException for SQL [SELECT * FROM VIEW_TRANSACTION_MIS WHERE MERCHANT_ID = ?]; SQL state [99999]; error code [17004]; Invalid column type: getTimestamp not implemented for class oracle.jdbc.driver.T4CNumberAccessor

@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ViewTransactionMis {

    private String merchantId;
    private String merchantName;
    private Character merchantCategory;
    private String orderRefNumber;
    private String atrnNum;
    private long instructionDateandTime;
    private  String currencyCode;
    private BigDecimal orderAmount;
    private BigDecimal totalFeeAbs;
    private String gstNumber;
    private Integer gatewayPostingAmount;
    private BigDecimal amountSettled;
    private BigDecimal availableRefundAmount;
    private String payMode;
    private String channelBank;
    private String gatewayTraceNumber;
    private String transactionStatus;
    private String remark;
    private String accessMedium;
    private String merchantRiskCategory;
    private String payProcId;
    private String payProcType;
    private String merchantAuthorize;
    private Date merchantAuthorizeDate;
    private String autoSettlement;
    private String bearableEntity;
    private String cin;
    private String failReason;
    private BigDecimal merchantFeeBearableAbs;
    private BigDecimal merchantGstBearableAbs;
    private BigDecimal customerFeeBearableAbs;
    private BigDecimal customerGstBearableAbs;
    private String sbuStatusDescription;
    private long paymentSuccessDate;

}

MERCHANT_ID	VARCHAR2(20)
MERCHANT_NAME	VARCHAR2(100)
MERCHANT_CATEGORY	CHAR()
ORDER_REF_NUMBER	VARCHAR2(50)
ATRN_NUM	VARCHAR2(50)
INSTRUCTION_DATEAND_TIME	NUMBER
CURRENCY_CODE	VARCHAR2(50)
ORDER_AMOUNT	NUMBER(20,2)
TOTAL_FEE_ABS	NUMBER(20,2)
GST_NUMBER	VARCHAR2(20)
GATEWAY_POSTING_AMOUNT	NUMBER
AMOUNT_SETTLED	NUMBER(20,2)
AVAILABLE_REFUND_AMOUNT	NUMBER(20,2)
PAY_MODE	VARCHAR2(50)
CHANNEL_BANK	VARCHAR2(100)
GATEWAY_TRACE_NUMBER	CHAR()
TRANSACTION_STATUS	VARCHAR2(50)
REMARK	CHAR()
MERCHANT_RISK_CATEGORY	CHAR()
ACCESS_MEDIUM	CHAR()
PAY_PROC_ID	VARCHAR2(20)
PAY_PROC_TYPE	VARCHAR2(20)
MERCHANT_AUTHORIZE	CHAR()
MERCHANT_AUTHORIZE_DATE	NUMBER
AUTO_SETTLEMENT	CHAR()
BEARABLE_ENTITY	CHAR(1)
CIN	VARCHAR2(50)
FAIL_REASON	VARCHAR2(2000)
MERCHANT_FEE_BEARABLE_ABS	NUMBER(20,2)
MERCHANT_GST_BEARABLE_ABS	NUMBER(20,2)
CUSTOMER_FEE_BEARABLE_ABS	NUMBER(20,2)
CUSTOMER_GST_BEARABLE_ABS	NUMBER(20,2)
SUB_STATUS_DESCRIPTION	CHAR()
PAYMENT_SUCCESS_DATE	DATE
RFS_ID	RAW

---------------------------------------------------------
SETTLEMENT_FILE_NUMBER	CHAR()
SETTLEMENT_TIME	VARCHAR2(19)
MERCHANT_ID	VARCHAR2(20)
MERCHANT_NAME	VARCHAR2(100)
ORDER_REF_NUMBER	VARCHAR2(50)
ATRN_NUM	VARCHAR2(50)
CREATED_DATE	VARCHAR2(19)
CURRENCY_CODE	VARCHAR2(50)
ORDER_AMOUNT	NUMBER(20,2)
SETTLEMENT_CURRENCY	VARCHAR2(50)
SETTLEMENT_AMOUNT	NUMBER
COMMISSION_PAYABLE	NUMBER
MERCHANT_GST_BEARABLE_ABS	NUMBER(20,2)
PAYOUT_AMOUNT	NUMBER
CHANNEL_BANK	VARCHAR2(100)
GATEWAY_TRACE_NUMBER	CHAR()
PAY_MODE	VARCHAR2(50)
PAY_PROC_ID	VARCHAR2(20)
OTHER_DETAILS	CLOB
BEARABLE_ENTITY	CHAR(1)
CIN	VARCHAR2(50)
RFS_ID	RAW



import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.fasterxml.jackson.annotation.JsonInclude;

import java.math.BigDecimal;
import java.sql.Clob;
import java.util.UUID;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Settlement {
    private String settlementFileNumber; // CHAR()
    private String settlementTime; // VARCHAR2(19)
    private String merchantId; // VARCHAR2(20)
    private String merchantName; // VARCHAR2(100)
    private String orderRefNumber; // VARCHAR2(50)
    private String atrnNum; // VARCHAR2(50)
    private String createdDate; // VARCHAR2(19)
    private String currencyCode; // VARCHAR2(50)
    private BigDecimal orderAmount; // NUMBER(20,2)
    private String settlementCurrency; // VARCHAR2(50)
    private BigDecimal settlementAmount; // NUMBER
    private BigDecimal commissionPayable; // NUMBER
    private BigDecimal merchantGstBearableAbs; // NUMBER(20,2)
    private BigDecimal payoutAmount; // NUMBER
    private String channelBank; // VARCHAR2(100)
    private String gatewayTraceNumber; // CHAR()
    private String payMode; // VARCHAR2(50)
    private String payProcId; // VARCHAR2(20)
    private String otherDetails; // CLOB
    private Character bearableEntity; // CHAR(1)
    private String cin; // VARCHAR2(50)
    private UUID rfsId; // RAW
}


import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.ObjectUtils;
import java.util.ArrayList;
import java.util.List;

protected List<Object> convertToListOfObject(Settlement settlement) {
    List<Object> objectList = new ArrayList<>();
    objectList.add(StringUtils.isEmpty(settlement.getSettlementFileNumber()) ? StringUtils.EMPTY : settlement.getSettlementFileNumber());
    objectList.add(StringUtils.isEmpty(settlement.getSettlementTime()) ? StringUtils.EMPTY : settlement.getSettlementTime());
    objectList.add(StringUtils.isEmpty(settlement.getMerchantId()) ? StringUtils.EMPTY : settlement.getMerchantId());
    objectList.add(StringUtils.isEmpty(settlement.getMerchantName()) ? StringUtils.EMPTY : settlement.getMerchantName());
    objectList.add(StringUtils.isEmpty(settlement.getOrderRefNumber()) ? StringUtils.EMPTY : settlement.getOrderRefNumber());
    objectList.add(StringUtils.isEmpty(settlement.getAtrnNum()) ? StringUtils.EMPTY : settlement.getAtrnNum());
    objectList.add(StringUtils.isEmpty(settlement.getCreatedDate()) ? StringUtils.EMPTY : settlement.getCreatedDate());
    objectList.add(StringUtils.isEmpty(settlement.getCurrencyCode()) ? StringUtils.EMPTY : settlement.getCurrencyCode());
    objectList.add(ObjectUtils.isEmpty(settlement.getOrderAmount()) ? StringUtils.EMPTY : settlement.getOrderAmount());
    objectList.add(StringUtils.isEmpty(settlement.getSettlementCurrency()) ? StringUtils.EMPTY : settlement.getSettlementCurrency());
    objectList.add(ObjectUtils.isEmpty(settlement.getSettlementAmount()) ? StringUtils.EMPTY : settlement.getSettlementAmount());
    objectList.add(ObjectUtils.isEmpty(settlement.getCommissionPayable()) ? StringUtils.EMPTY : settlement.getCommissionPayable());
    objectList.add(ObjectUtils.isEmpty(settlement.getMerchantGstBearableAbs()) ? StringUtils.EMPTY : settlement.getMerchantGstBearableAbs());
    objectList.add(ObjectUtils.isEmpty(settlement.getPayoutAmount()) ? StringUtils.EMPTY : settlement.getPayoutAmount());
    objectList.add(StringUtils.isEmpty(settlement.getChannelBank()) ? StringUtils.EMPTY : settlement.getChannelBank());
    objectList.add(StringUtils.isEmpty(settlement.getGatewayTraceNumber()) ? StringUtils.EMPTY : settlement.getGatewayTraceNumber());
    objectList.add(StringUtils.isEmpty(settlement.getPayMode()) ? StringUtils.EMPTY : settlement.getPayMode());
    objectList.add(StringUtils.isEmpty(settlement.getPayProcId()) ? StringUtils.EMPTY : settlement.getPayProcId());
    objectList.add(StringUtils.isEmpty(settlement.getOtherDetails()) ? StringUtils.EMPTY : settlement.getOtherDetails());
    objectList.add(ObjectUtils.isEmpty(settlement.getBearableEntity()) ? StringUtils.EMPTY : settlement.getBearableEntity());
    objectList.add(StringUtils.isEmpty(settlement.getCin()) ? StringUtils.EMPTY : settlement.getCin());
    objectList.add(ObjectUtils.isEmpty(settlement.getRfsId()) ? StringUtils.EMPTY : settlement.getRfsId());
    return objectList;
}


MERCHANT_ID	VARCHAR2(20)
MERCHANT_CATEGORY	CHAR()
MERCHANT_NAME	VARCHAR2(100)
ORDER_REF_NUMBER	VARCHAR2(50)
ATRN_NUM	VARCHAR2(50)
TRANSACTION_DATE	VARCHAR2(19)
ORDER_AMOUNT	NUMBER(20,2)
CURRENCY_CODE	VARCHAR2(50)
TRANSACTION_STATUS	VARCHAR2(50)
ETL_UPLOAD_DATE	CHAR()
ETL_STATUS	CHAR()
CHANNEL_BANK	VARCHAR2(100)
GATEWAY_TRACE_NUMBER	CHAR()
PAY_MODE	VARCHAR2(50)
GATEWAY_STATUS	CHAR()


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.fasterxml.jackson.annotation.JsonInclude;

import java.math.BigDecimal;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Transaction {
    private String merchantId; // VARCHAR2(20)
    private Character merchantCategory; // CHAR()
    private String merchantName; // VARCHAR2(100)
    private String orderRefNumber; // VARCHAR2(50)
    private String atrnNum; // VARCHAR2(50)
    private String transactionDate; // VARCHAR2(19)
    private BigDecimal orderAmount; // NUMBER(20,2)
    private String currencyCode; // VARCHAR2(50)
    private String transactionStatus; // VARCHAR2(50)
    private String etlUploadDate; // CHAR()
    private String etlStatus; // CHAR()
    private String channelBank; // VARCHAR2(100)
    private String gatewayTraceNumber; // CHAR()
    private String payMode; // VARCHAR2(50)
    private String gatewayStatus; // CHAR()
}

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.ObjectUtils;
import java.util.ArrayList;
import java.util.List;

protected List<Object> convertToListOfObject(Transaction transaction) {
    List<Object> objectList = new ArrayList<>();
    objectList.add(StringUtils.isEmpty(transaction.getMerchantId()) ? StringUtils.EMPTY : transaction.getMerchantId());
    objectList.add(ObjectUtils.isEmpty(transaction.getMerchantCategory()) ? StringUtils.EMPTY : transaction.getMerchantCategory());
    objectList.add(StringUtils.isEmpty(transaction.getMerchantName()) ? StringUtils.EMPTY : transaction.getMerchantName());
    objectList.add(StringUtils.isEmpty(transaction.getOrderRefNumber()) ? StringUtils.EMPTY : transaction.getOrderRefNumber());
    objectList.add(StringUtils.isEmpty(transaction.getAtrnNum()) ? StringUtils.EMPTY : transaction.getAtrnNum());
    objectList.add(StringUtils.isEmpty(transaction.getTransactionDate()) ? StringUtils.EMPTY : transaction.getTransactionDate());
    objectList.add(ObjectUtils.isEmpty(transaction.getOrderAmount()) ? StringUtils.EMPTY : transaction.getOrderAmount());
    objectList.add(StringUtils.isEmpty(transaction.getCurrencyCode()) ? StringUtils.EMPTY : transaction.getCurrencyCode());
    objectList.add(StringUtils.isEmpty(transaction.getTransactionStatus()) ? StringUtils.EMPTY : transaction.getTransactionStatus());
    objectList.add(StringUtils.isEmpty(transaction.getEtlUploadDate()) ? StringUtils.EMPTY : transaction.getEtlUploadDate());
    objectList.add(StringUtils.isEmpty(transaction.getEtlStatus()) ? StringUtils.EMPTY : transaction.getEtlStatus());
    objectList.add(StringUtils.isEmpty(transaction.getChannelBank()) ? StringUtils.EMPTY : transaction.getChannelBank());
    objectList.add(StringUtils.isEmpty(transaction.getGatewayTraceNumber()) ? StringUtils.EMPTY : transaction.getGatewayTraceNumber());
    objectList.add(StringUtils.isEmpty(transaction.getPayMode()) ? StringUtils.EMPTY : transaction.getPayMode());
    objectList.add(StringUtils.isEmpty(transaction.getGatewayStatus()) ? StringUtils.EMPTY : transaction.getGatewayStatus());
    return objectList;
}