Below is my code in which i get the list<UUID> merchantPayouts based on two condition refundAdjusted = true and payoutStatus = READY_FOR_PAYOUT


@Service
@RequiredArgsConstructor
public class PayoutReportService {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ReportRequestDao reportRequestDao;
    private final ReportRequestPublisher reportRequestPublisher;
    private final SftpClientService sftpClientService;

    public void reportGenerationRequest() {
        log.info("Getting list of MpId based upon payoutStatus and refund adjusted.");
        List<UUID> merchantPayouts = reportRequestDao.getAllMerchantPayoutForReport();
        if (CollectionUtils.isEmpty(merchantPayouts)) {
            log.info("No Pending Merchant Payout for Report generation");
            return;
        }
        PayoutInfoDto payoutInfoDto = createReportAndBuildPayoutInfo(merchantPayouts);
        log.info("Report request completed, saving payout info.");
        reportRequestDao.savePayoutInfo(payoutInfoDto, merchantPayouts);
    }
	}
	
	@Component
@AllArgsConstructor
public class ReportRequestDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final ReportRequestRepository reportRequestRepository;
    private final MerchantPayoutDao merchantPayoutDao;
    private final PayoutInfoDao payoutInfoDao;
    private final ReportRequestMapper reportRequestMapper;
    private final ReconFileDetailsDao reconFileDetailsDao;


    public List<UUID> getAllMerchantPayoutForReport() {
        return merchantPayoutDao.getAllMerchantPayoutForReport();
    }
	}
	
	@Component
@RequiredArgsConstructor
public class MerchantPayoutDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantPayoutJdbcRepository merchantPayoutJdbcRepository;
    private final MerchantPayoutRepository merchantPayoutRepository;


    public List<UUID> getAllMerchantPayoutForReport() {
        return merchantPayoutRepository.findByRefundedAdjustTrueAndPayoutStatus(PayoutStatus.READY_FOR_PAYOUT);
    }
	}
	
	@Repository
public interface MerchantPayoutRepository extends JpaRepository<MerchantPayout, UUID> {

    @Query("SELECT m.mpId FROM MerchantPayout m WHERE m.refundAdjusted = true and m.payoutStatus = :payoutStatus")
    List<UUID> findByRefundedAdjustTrueAndPayoutStatus(@Param("payoutStatus") PayoutStatus payoutStatus);
	}
	
	CREATE TABLE MERCHANT_PAYOUT(
    MP_ID               RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    PI_ID               RAW(16),
    MERCHANT_ID         VARCHAR2(10),
    PAYOUT_AMOUNT       NUMBER(20, 2),
    REFUNDED_AMOUNT     NUMBER(20,2),
    REFUND_ADJUSTED     NUMBER(1),
    BANK_ID             VARCHAR2(20),
    ACCOUNT_ID          VARCHAR2(50),
    ACCOUNT_NUMBER      VARCHAR2(50),
    PAYOUT_STATUS       VARCHAR2(20) DEFAULT 'PENDING' CHECK (PAYOUT_STATUS IN ('PENDING','IN_PROCESS','SUCCESS','FAIL','READY_FOR_PAYOUT')) ENABLE,
    CREATED_DATE        NUMBER NOT NULL,
    UPDATED_DATE        NUMBER
    );
	
	now there is some change in condition i want get get the data from DB based upon last Updated_time it should get the data after two mins of delay.
	i means to say we need to change in query and get the data after two min of last updated_time.

