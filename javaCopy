

@PostMapping("/update")
    public ResponseEntity<String> update(@RequestBody List<ReconFileDtlsDto> reconFileDtlsDtos){
        reconFileDetailsDao.save(reconFileDtlsDtos);
        return ResponseEntity.ok("Update is successful ");
    }

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ReconFileDtlsDto {

    private UUID rfdId;
    private UUID rfsId;
    private int rowNumber;
    private String recordType;
    private String atrnNum;
    private BigDecimal paymentAmount;
    private Date paymentDate;
    private String bankRefNumber;
    private PaymentStatus paymentStatus;
    private ReconStatus reconStatus;
    private SettlementStatus settlementStatus;
    private String remark;

}
above is my controller and reconFileDtlsDtos can you create postman request for this controller 
in postman put some value as well for request  and creat 3- 4 reconFileDtlsDtos for List<ReconFileDtlsDto>


[
  {
    "rfdId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    "rfsId": "3fa85f64-5717-4562-b3fc-2c963f66afa7",
    "rowNumber": 1,
    "recordType": "PAYMENT",
    "atrnNum": "ATRN123456",
    "paymentAmount": 1500.75,
    "paymentDate": "2023-05-15",
    "bankRefNumber": "BREF789012",
    "paymentStatus": "SUCCESS",
    "reconStatus": "MATCHED",
    "settlementStatus": "SETTLED",
    "remark": "First record processed successfully"
  },
  {
    "rfdId": "3fa85f64-5717-4562-b3fc-2c963f66afa8",
    "rfsId": "3fa85f64-5717-4562-b3fc-2c963f66afa9",
    "rowNumber": 2,
    "recordType": "REFUND",
    "atrnNum": "ATRN654321",
    "paymentAmount": 200.50,
    "paymentDate": "2023-05-16",
    "bankRefNumber": "BREF123456",
    "paymentStatus": "PENDING",
    "reconStatus": "UNMATCHED",
    "settlementStatus": "PENDING",
    "remark": "Refund request in progress"
  },
  {
    "rfdId": "3fa85f64-5717-4562-b3fc-2c963f66afb0",
    "rfsId": "3fa85f64-5717-4562-b3fc-2c963f66afb1",
    "rowNumber": 3,
    "recordType": "PAYMENT",
    "atrnNum": "ATRN987654",
    "paymentAmount": 3000.00,
    "paymentDate": "2023-05-17",
    "bankRefNumber": "BREF456789",
    "paymentStatus": "FAILED",
    "reconStatus": "DISPUTED",
    "settlementStatus": "FAILED",
    "remark": "Payment failed due to insufficient funds"
  },
  {
    "rfdId": "3fa85f64-5717-4562-b3fc-2c963f66afb2",
    "rfsId": "3fa85f64-5717-4562-b3fc-2c963f66afb3",
    "rowNumber": 4,
    "recordType": "CHARGEBACK",
    "atrnNum": "ATRN567890",
    "paymentAmount": 500.25,
    "paymentDate": "2023-05-18",
    "bankRefNumber": "BREF345678",
    "paymentStatus": "REVERSED",
    "reconStatus": "PARTIALLY_MATCHED",
    "settlementStatus": "REVERSED",
    "remark": "Chargeback initiated by customer"
  }
]


public void saveList(List<ReconFileDtls> reconFileDtlsList) {
    log.info("Saving {} ReconFileDtls records", reconFileDtlsList.size());
    
    String INSERT_RECON_FILE_DTLS = "INSERT INTO RECON_FILE_DTLS " +
            "(RFD_ID, RFS_ID, ATRN_NUM, PAYMENT_AMOUNT, RECON_STATUS, ROW_NUMBER, " +
            "RECORD_TYPE, PAYMENT_DATE, BANK_REF_NUMBER, PAYMENT_STATUS, " +
            "SETTLEMENT_STATUS, REMARK) " +
            "VALUES (HEXTORAW(REPLACE(:rfdId, '-', '')), HEXTORAW(REPLACE(:rfsId, '-', '')), " +
            ":atrnNum, :paymentAmount, :reconStatus, :rowNumber, " +
            ":recordType, :paymentDate, :bankRefNumber, :paymentStatus, " +
            ":settlementStatus, :remark)";
    
    try {
        jdbcTemplate.batchUpdate(INSERT_RECON_FILE_DTLS, reconFileDtlsList.stream()
            .map(dto -> {
                MapSqlParameterSource params = new MapSqlParameterSource();
                params.addValue("rfdId", dto.getRfdId().toString());
                params.addValue("rfsId", dto.getRfsId().toString());
                params.addValue("atrnNum", dto.getAtrnNum());
                params.addValue("paymentAmount", dto.getPaymentAmount());
                params.addValue("reconStatus", dto.getReconStatus().name());
                params.addValue("rowNumber", dto.getRowNumber());
                params.addValue("recordType", dto.getRecordType());
                params.addValue("paymentDate", dto.getPaymentDate());
                params.addValue("bankRefNumber", dto.getBankRefNumber());
                params.addValue("paymentStatus", dto.getPaymentStatus().name());
                params.addValue("settlementStatus", dto.getSettlementStatus().name());
                params.addValue("remark", dto.getRemark());
                return params;
            })
            .toArray(MapSqlParameterSource[]::new));
    } catch (DataAccessException e) {
        log.error("Error saving ReconFileDtls records", e);
        throw e;
    }
}



public void saveList(List<ReconFileDtls> reconFileDtlsList) {
    log.info("Saving {} ReconFileDtls records", reconFileDtlsList.size());
    
    String INSERT_RECON_FILE_DTLS = "INSERT INTO RECON_FILE_DTLS " +
            "(RFD_ID, RFS_ID, ATRN_NUM, PAYMENT_AMOUNT, RECON_STATUS, ROW_NUMBER, " +
            "RECORD_TYPE, PAYMENT_DATE, BANK_REF_NUMBER, PAYMENT_STATUS, " +
            "SETTLEMENT_STATUS, REMARK) " +
            "VALUES (HEXTORAW(REPLACE(:rfdId, '-', '')), HEXTORAW(REPLACE(:rfsId, '-', '')), " +
            ":atrnNum, :paymentAmount, :reconStatus, :rowNumber, " +
            ":recordType, :paymentDate, :bankRefNumber, :paymentStatus, " +
            ":settlementStatus, :remark)";
    
    List<MapSqlParameterSource> paramsList = reconFileDtlsList.stream()
            .map(dto -> {
                MapSqlParameterSource params = new MapSqlParameterSource();
                params.addValue("rfdId", dto.getRfdId().toString());
                params.addValue("rfsId", dto.getRfsId().toString());
                params.addValue("atrnNum", dto.getAtrnNum());
                params.addValue("paymentAmount", dto.getPaymentAmount());
                params.addValue("reconStatus", dto.getReconStatus().name());
                params.addValue("rowNumber", dto.getRowNumber());
                params.addValue("recordType", dto.getRecordType());
                params.addValue("paymentDate", dto.getPaymentDate());
                params.addValue("bankRefNumber", dto.getBankRefNumber());
                params.addValue("paymentStatus", dto.getPaymentStatus().name());
                params.addValue("settlementStatus", dto.getSettlementStatus().name());
                params.addValue("remark", dto.getRemark());
                return params;
            })
            .collect(Collectors.toList());
    
    jdbcTemplate.batchUpdate(INSERT_RECON_FILE_DTLS, paramsList.toArray(new MapSqlParameterSource[0]));
}